//----------------------
// <auto-generated>
//     GENERATED BY ZEBBLE
// </auto-generated>
#pragma warning disable  IDE0017, CS0108, CS0436
//----------------------

using System;
using Zebble;
using Zebble.Services;
using Zebble.Plugin;
using Zebble.Device;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using System.Threading.Tasks;
using Olive;

namespace UI
{
    [EscapeGCop("Auto-generated")]
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Common.scss---------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.BlankCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BlankBodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BlankBodyScrollerBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LinkCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopupOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NormalSizeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BgPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Border0CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextCenterCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WidthContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.W100CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeHolderImgCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeHolderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeHolderMessageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeHolderNormalButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeHolderButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomeHolderTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeHomeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkHomeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeHomeHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkHomeHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeHomeHolderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkHomeHolderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeHomeHolderMessageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkHomeHolderMessageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeHomeHolderButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkHomeHolderButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WrapperCssRule());
        }
    }
}

// Ensure auto-generated namespaces exist:
namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Plugin { }
namespace Zebble.Data { }

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:1", "Blank")]
    [CssBody("height: calc(\"View.Root.Height, x => x\");")]
    class BlankCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Blank

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Blank)untypedView;
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Height, x => x);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:2", "Blank #BodyScroller")]
    [CssBody("height: 100%;")]
    class BlankBodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BodyScroller

            view = CssEngine.FindParentByType<Blank>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:1", "Blank #BodyScroller #Body")]
    [CssBody("background-color: transparent;")]
    class BlankBodyScrollerBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentById(view, "BodyScroller");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Blank>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:1", "Button")]
    [CssBody("height: 40px; border: none; color: #484646; margin-bottom: 10px;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Height = 40;
            view.Css.Margin.Bottom = 10;
            view.Css.Border = 0;
            view.Css.TextColor = "#484646";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Button:disabled")]
    [CssBody("color: #a3a2a2; border: 1px solid #d1d1d1;")]
    class ButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = "#a3a2a2";
            view.Css.Border = new Border(1, "#d1d1d1");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:3", "Link")]
    [CssBody("color: #484646; text-align: center; margin-top: 15px;")]
    class LinkCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Link

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Link)untypedView;
            view.Css.Margin.Top = 15;
            view.Css.TextColor = "#484646";
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:5", "ImageView")]
    [CssBody("visibility: visible; display: normal;")]
    class ImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            return true;
        }

        public override async Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Visible = true;
            await view.Css.IgnoredAsync(false);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "PopUp")]
    [CssBody("width: 100%; height: 100%; padding: 0 20px;")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(vertical: 0, horizontal: 20);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:10", "#PopupOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background-color: red;")]
    class PopupOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PopupOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".Normal_Size")]
    [CssBody("font-size: 16px;")]
    class NormalSizeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Normal_Size

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:15", ".bg_primary")]
    [CssBody("background-color: gray; color: white;")]
    class BgPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .bg_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Gray;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:17", ".border_0")]
    [CssBody("border-width: 0;")]
    class Border0CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .border_0

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border.Width = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:2", ".text_primary")]
    [CssBody("color: black;")]
    class TextPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:4", ".text_center")]
    [CssBody("text-align: center;")]
    class TextCenterCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_center

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:2", ".text_right")]
    [CssBody("text-align: right;")]
    class TextRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_right

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:4", ".text_left")]
    [CssBody("text-align: left;")]
    class TextLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_left

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".width_content")]
    [CssBody("width: calc(\"content\");")]
    class WidthContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .width_content

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:9", ".my-2")]
    [CssBody("margin-top: 5px; margin-bottom: 5px;")]
    class My2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.Margin.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:11", ".my-3")]
    [CssBody("margin-top: 10px; margin-bottom: 10px;")]
    class My3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.Margin.Bottom = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:13", ".my-4")]
    [CssBody("margin-top: 15px; margin-bottom: 15px;")]
    class My4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;
            view.Css.Margin.Bottom = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:1", ".mx-2")]
    [CssBody("margin-right: 5px; margin-left: 5px;")]
    class Mx2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 5;
            view.Css.Margin.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".mx-3")]
    [CssBody("margin-right: 10px; margin-left: 10px;")]
    class Mx3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 10;
            view.Css.Margin.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:5", ".mx-4")]
    [CssBody("margin-right: 15px; margin-left: 15px;")]
    class Mx4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 15;
            view.Css.Margin.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".mt-2")]
    [CssBody("margin-top: 5px;")]
    class Mt2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:9", ".mt-3")]
    [CssBody("margin-top: 10px;")]
    class Mt3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:11", ".mt-4")]
    [CssBody("margin-top: 15px;")]
    class Mt4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".px-2")]
    [CssBody("padding-right: 5px; padding-left: 5px;")]
    class Px2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 5;
            view.Css.Padding.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:16", ".px-3")]
    [CssBody("padding-right: 10px; padding-left: 10px;")]
    class Px3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 10;
            view.Css.Padding.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:19", ".px-4")]
    [CssBody("padding-right: 15px; padding-left: 15px;")]
    class Px4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 15;
            view.Css.Padding.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".w-100")]
    [CssBody("width: 100%;")]
    class W100CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .w-100

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:23", "Home")]
    [CssBody("background-color: white;")]
    class HomeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Home

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Home)untypedView;
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Home #holder")]
    [CssBody("height: 100%; width: 100%; background-color: transparent; width: calc(\"Content\"); height: calc(\"Content\"); margin-top: calc(\"view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2\");")]
    class HomeHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #holder

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Width = 100.Percent();
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2);
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:28", "Home #holder #Img")]
    [CssBody("margin-left: calc(\"view.Width,view.Parent.Width,(vw,pw)=>(pw-vw)/2\"); width: 186px; height: 250px;")]
    class HomeHolderImgCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Img

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 250;
            view.Css.Width = 186;
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Width,view.Parent.Width,(vw,pw)=>(pw-vw)/2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:29", "Home #holder #Title")]
    [CssBody("font-weight: bold; text-align: center; color: #3A1251; font-size: 24px;")]
    class HomeHolderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 24;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Home #holder #Message")]
    [CssBody("font-weight: bold; font-size: 15px; margin-top: 7px; text-align: center; color: #3A1251;")]
    class HomeHolderMessageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Message

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 15;
            view.Css.Margin.Top = 7;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:32", "Home #holder #NormalButton")]
    [CssBody("height: 38px; border-radius: 19px; margin-left: 45px; margin-right: 45px; margin-top: 17px; background-color: #32BDD2; font-weight: bold; font-size: 14px;")]
    class HomeHolderNormalButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #NormalButton

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 38;
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 14;
            view.Css.Margin.Left = 45;
            view.Css.Margin.Right = 45;
            view.Css.Margin.Top = 17;
            view.Css.BorderRadius = 19;
            view.Css.BackgroundColor = "#32BDD2";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:33", "Home #holder #ButtonTextView")]
    [CssBody("font-weight: bold; font-size: 14px; color: white; text-align: center; margin-top: calc(\"view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2\");")]
    class HomeHolderButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ButtonTextView

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 14;
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2);
            view.Css.TextColor = Colors.White;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:34", "Home #holder #TextBox")]
    [CssBody("margin-top: 9px;")]
    class HomeHolderTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 9;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:37", ".dark-mode Home")]
    [CssBody("background-color: #333333;")]
    class DarkModeHomeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Home

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Home)untypedView;
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:37", "Page:dark Home")]
    [CssBody("background-color: #333333;")]
    class PageDarkHomeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Home

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Home)untypedView;
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:38", ".dark-mode Home #holder")]
    [CssBody("background-color: transparent;")]
    class DarkModeHomeHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #holder

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:38", "Page:dark Home #holder")]
    [CssBody("background-color: transparent;")]
    class PageDarkHomeHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #holder

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:39", ".dark-mode Home #holder #Title")]
    [CssBody("color: white;")]
    class DarkModeHomeHolderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:39", "Page:dark Home #holder #Title")]
    [CssBody("color: white;")]
    class PageDarkHomeHolderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".dark-mode Home #holder #Message")]
    [CssBody("color: white;")]
    class DarkModeHomeHolderMessageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Message

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page:dark Home #holder #Message")]
    [CssBody("color: white;")]
    class PageDarkHomeHolderMessageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Message

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:42", ".dark-mode Home #holder #ButtonTextView")]
    [CssBody("color: #3A1251;")]
    class DarkModeHomeHolderButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ButtonTextView

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:42", "Page:dark Home #holder #ButtonTextView")]
    [CssBody("color: #3A1251;")]
    class PageDarkHomeHolderButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ButtonTextView

            view = CssEngine.FindParentById(view, "holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Home>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:44", "#Body")]
    [CssBody("height: 100%;")]
    class BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:47", "#Wrapper")]
    [CssBody("padding: 16px;")]
    class WrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Wrapper

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(16);

            return Task.CompletedTask;
        }
    }
}