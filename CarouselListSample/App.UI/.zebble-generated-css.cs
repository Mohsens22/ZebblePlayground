//----------------------
// <auto-generated>
//     GENERATED BY ZEBBLE
// </auto-generated>
#pragma warning disable  IDE0017, CS0108, CS0436
//----------------------

using System;
using Zebble;
using Zebble.Services;
using Zebble.Plugin;
using Zebble.Device;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using System.Threading.Tasks;
using Olive;

namespace UI
{
    [EscapeGCop("Auto-generated")]
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Common.scss---------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.BlankCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BlankBodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BlankBodyScrollerBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LinkCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopupOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NormalSizeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BgPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Border0CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextCenterCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WidthContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.W100CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoriesPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoriesPageScaffoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoriesPagePrimaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoriesPagePrimaryButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeCategoriesPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkCategoriesPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeCategoriesPageScaffoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkCategoriesPageScaffoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemCategoryNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemCarouselCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemCarouselSlidesContainerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemCarouselSlidesContainerCarouselSlideCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemCategorySlideCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemSubjectImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryListItemSubjectNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeCategoryListItemCategoryNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkCategoryListItemCategoryNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeCategoryListItemCategorySlideCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkCategoryListItemCategorySlideCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeCategoryListItemSubjectNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkCategoryListItemSubjectNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageScaffoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageScaffoldScrollViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageScaffoldSubjectListCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPagePrimaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPagePrimaryButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageListItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageListItemTextholderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageListItemWordTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageListItemWordRankCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectPageListItemWordSubCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeScaffoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkScaffoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeScaffoldListItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkScaffoldListItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeScaffoldListItemWordTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkScaffoldListItemWordTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeScaffoldListItemWordRankCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkScaffoldListItemWordRankCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModeScaffoldListItemWordSubCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkScaffoldListItemWordSubCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkModePrimaryButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkPrimaryButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WrapperCssRule());
        }
    }
}

// Ensure auto-generated namespaces exist:
namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Plugin { }
namespace Zebble.Data { }

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:1", "Blank")]
    [CssBody("height: calc(\"View.Root.Height, x => x\");")]
    class BlankCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Blank

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Blank)untypedView;
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Height, x => x);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:2", "Blank #BodyScroller")]
    [CssBody("height: 100%;")]
    class BlankBodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BodyScroller

            view = CssEngine.FindParentByType<Blank>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:1", "Blank #BodyScroller #Body")]
    [CssBody("background-color: transparent;")]
    class BlankBodyScrollerBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentById(view, "BodyScroller");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Blank>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Templates/Blank.scss:1", "Button")]
    [CssBody("height: 40px; border: none; color: #484646; margin-bottom: 10px;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Height = 40;
            view.Css.Margin.Bottom = 10;
            view.Css.Border = 0;
            view.Css.TextColor = "#484646";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Button:disabled")]
    [CssBody("color: #a3a2a2; border: 1px solid #d1d1d1;")]
    class ButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = "#a3a2a2";
            view.Css.Border = new Border(1, "#d1d1d1");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:3", "Link")]
    [CssBody("color: #484646; text-align: center; margin-top: 15px;")]
    class LinkCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Link

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Link)untypedView;
            view.Css.Margin.Top = 15;
            view.Css.TextColor = "#484646";
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:5", "ImageView")]
    [CssBody("visibility: visible; display: normal;")]
    class ImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            return true;
        }

        public override async Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Visible = true;
            await view.Css.IgnoredAsync(false);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "PopUp")]
    [CssBody("width: 100%; height: 100%; padding: 0 20px;")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(vertical: 0, horizontal: 20);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:10", "#PopupOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background-color: red;")]
    class PopupOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PopupOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".Normal_Size")]
    [CssBody("font-size: 16px;")]
    class NormalSizeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Normal_Size

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:15", ".bg_primary")]
    [CssBody("background-color: gray; color: white;")]
    class BgPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .bg_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Gray;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:17", ".border_0")]
    [CssBody("border-width: 0;")]
    class Border0CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .border_0

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border.Width = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:2", ".text_primary")]
    [CssBody("color: black;")]
    class TextPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:4", ".text_center")]
    [CssBody("text-align: center;")]
    class TextCenterCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_center

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:2", ".text_right")]
    [CssBody("text-align: right;")]
    class TextRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_right

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:4", ".text_left")]
    [CssBody("text-align: left;")]
    class TextLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_left

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".width_content")]
    [CssBody("width: calc(\"content\");")]
    class WidthContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .width_content

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:9", ".my-2")]
    [CssBody("margin-top: 5px; margin-bottom: 5px;")]
    class My2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.Margin.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:11", ".my-3")]
    [CssBody("margin-top: 10px; margin-bottom: 10px;")]
    class My3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.Margin.Bottom = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:13", ".my-4")]
    [CssBody("margin-top: 15px; margin-bottom: 15px;")]
    class My4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;
            view.Css.Margin.Bottom = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:1", ".mx-2")]
    [CssBody("margin-right: 5px; margin-left: 5px;")]
    class Mx2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 5;
            view.Css.Margin.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".mx-3")]
    [CssBody("margin-right: 10px; margin-left: 10px;")]
    class Mx3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 10;
            view.Css.Margin.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:5", ".mx-4")]
    [CssBody("margin-right: 15px; margin-left: 15px;")]
    class Mx4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 15;
            view.Css.Margin.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".mt-2")]
    [CssBody("margin-top: 5px;")]
    class Mt2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:9", ".mt-3")]
    [CssBody("margin-top: 10px;")]
    class Mt3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:11", ".mt-4")]
    [CssBody("margin-top: 15px;")]
    class Mt4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".px-2")]
    [CssBody("padding-right: 5px; padding-left: 5px;")]
    class Px2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 5;
            view.Css.Padding.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:16", ".px-3")]
    [CssBody("padding-right: 10px; padding-left: 10px;")]
    class Px3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 10;
            view.Css.Padding.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:19", ".px-4")]
    [CssBody("padding-right: 15px; padding-left: 15px;")]
    class Px4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 15;
            view.Css.Padding.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".w-100")]
    [CssBody("width: 100%;")]
    class W100CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .w-100

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:23", "CategoriesPage")]
    [CssBody("background-color: #F5F5F5;")]
    class CategoriesPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CategoriesPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CategoriesPage)untypedView;
            view.Css.BackgroundColor = "#F5F5F5";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "CategoriesPage #Scaffold")]
    [CssBody("margin-left: 16px; margin-top: 30px;")]
    class CategoriesPageScaffoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Scaffold

            view = CssEngine.FindParentByType<CategoriesPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Left = 16;
            view.Css.Margin.Top = 30;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:28", "CategoriesPage .PrimaryButton")]
    [CssBody("border-radius: 25px; background-color: #32BDD2; margin-top: 54px; height: 40px; width: 204px; margin-left: calc(\"view.Width,view.parent.Width,(vw,pw)=>(pw-vw)/2\");")]
    class CategoriesPagePrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .PrimaryButton

            view = CssEngine.FindParentByType<CategoriesPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 40;
            view.Css.Width = 204;
            view.Css.Margin.Top = 54;
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Width,view.parent.Width,(vw,pw)=>(pw-vw)/2);
            view.Css.BorderRadius = 25;
            view.Css.BackgroundColor = "#32BDD2";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:29", "CategoriesPage .PrimaryButton TextView")]
    [CssBody("text-align: center; font-weight: bold; font-size: 14px; color: white; margin-top: calc(\"view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2\");")]
    class CategoriesPagePrimaryButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentByCssClass(view, "PrimaryButton");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CategoriesPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 14;
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2);
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:32", ".dark-mode CategoriesPage")]
    [CssBody("background-color: #000000;")]
    class DarkModeCategoriesPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CategoriesPage

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CategoriesPage)untypedView;
            view.Css.BackgroundColor = "#000000";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:32", "Page:dark CategoriesPage")]
    [CssBody("background-color: #000000;")]
    class PageDarkCategoriesPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CategoriesPage

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CategoriesPage)untypedView;
            view.Css.BackgroundColor = "#000000";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:33", ".dark-mode CategoriesPage #Scaffold")]
    [CssBody("background-color: #000000;")]
    class DarkModeCategoriesPageScaffoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Scaffold

            view = CssEngine.FindParentByType<CategoriesPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#000000";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:33", "Page:dark CategoriesPage #Scaffold")]
    [CssBody("background-color: #000000;")]
    class PageDarkCategoriesPageScaffoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Scaffold

            view = CssEngine.FindParentByType<CategoriesPage>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#000000";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "CategoryListItem")]
    [CssBody("margin-bottom: 5px;")]
    class CategoryListItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CategoryListItem

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CategoryListItem)untypedView;
            view.Css.Margin.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:37", "CategoryListItem #CategoryName")]
    [CssBody("font-weight: bold; font-size: 16px; color: #3A1251;")]
    class CategoryListItemCategoryNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CategoryName

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 16;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:38", "CategoryListItem #Carousel")]
    [CssBody("height: 125px; margin-top: 5px;")]
    class CategoryListItemCarouselCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Carousel

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 125;
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:39", "CategoryListItem #Carousel #SlidesContainer")]
    [CssBody("height: calc(\"Content\");")]
    class CategoryListItemCarouselSlidesContainerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SlidesContainer

            view = CssEngine.FindParentById(view, "Carousel");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "CategoryListItem #Carousel #SlidesContainer Carousel-Slide")]
    [CssBody("height: calc(\"Content\"); padding-left: 5px;")]
    class CategoryListItemCarouselSlidesContainerCarouselSlideCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Carousel-Slide

            view = CssEngine.FindParentById(view, "SlidesContainer");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Carousel");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Carousel.Slide)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:42", "CategoryListItem .CategorySlide")]
    [CssBody("background-color: white; height: 120px; width: 100%; border-radius: 3px;")]
    class CategoryListItemCategorySlideCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .CategorySlide

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 120;
            view.Css.Width = 100.Percent();
            view.Css.BackgroundColor = Colors.White;
            view.Css.BorderRadius = 3;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:43", "CategoryListItem .SubjectImage")]
    [CssBody("height: 80px; width: 80px;")]
    class CategoryListItemSubjectImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SubjectImage

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 80;
            view.Css.Width = 80;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:44", "CategoryListItem .SubjectName")]
    [CssBody("margin-top: 5px; height: calc(\"Content\"); font-weight: bold; font-size: 12px; text-align: center; color: #3A1251; margin-left: calc(\"view.Width,view.parent.Width,(vw,pw)=>(pw-vw)/2\");")]
    class CategoryListItemSubjectNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SubjectName

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 12;
            view.Css.Margin.Top = 5;
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Width,view.parent.Width,(vw,pw)=>(pw-vw)/2);
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:47", ".dark-mode CategoryListItem #CategoryName")]
    [CssBody("color: white;")]
    class DarkModeCategoryListItemCategoryNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CategoryName

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:47", "Page:dark CategoryListItem #CategoryName")]
    [CssBody("color: white;")]
    class PageDarkCategoryListItemCategoryNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CategoryName

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:49", ".dark-mode CategoryListItem .CategorySlide")]
    [CssBody("background-color: #333333;")]
    class DarkModeCategoryListItemCategorySlideCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .CategorySlide

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:49", "Page:dark CategoryListItem .CategorySlide")]
    [CssBody("background-color: #333333;")]
    class PageDarkCategoryListItemCategorySlideCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .CategorySlide

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:52", ".dark-mode CategoryListItem .SubjectName")]
    [CssBody("color: white;")]
    class DarkModeCategoryListItemSubjectNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SubjectName

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:52", "Page:dark CategoryListItem .SubjectName")]
    [CssBody("color: white;")]
    class PageDarkCategoryListItemSubjectNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SubjectName

            view = CssEngine.FindParentByType<CategoryListItem>(view);

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:54", "SubjectPage #Scaffold")]
    [CssBody("background-color: #F5F5F5; height: 100%;")]
    class SubjectPageScaffoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Scaffold

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.BackgroundColor = "#F5F5F5";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "SubjectPage #Scaffold ScrollView")]
    [CssBody("height: calc(\"Container\");")]
    class SubjectPageScaffoldScrollViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ScrollView

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ScrollView)untypedView;
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:57", "SubjectPage #Scaffold #SubjectList")]
    [CssBody("height: calc(\"Content\");")]
    class SubjectPageScaffoldSubjectListCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SubjectList

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:59", "SubjectPage .PrimaryButton")]
    [CssBody("border-radius: 25px; background-color: #32BDD2; margin-top: 24px; height: 40px; width: 204px; margin-left: calc(\"view.Width,view.parent.Width,(vw,pw)=>(pw-vw)/2\");")]
    class SubjectPagePrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .PrimaryButton

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 40;
            view.Css.Width = 204;
            view.Css.Margin.Top = 24;
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Width,view.parent.Width,(vw,pw)=>(pw-vw)/2);
            view.Css.BorderRadius = 25;
            view.Css.BackgroundColor = "#32BDD2";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "SubjectPage .PrimaryButton TextView")]
    [CssBody("text-align: center; font-weight: bold; font-size: 14px; color: white; margin-top: calc(\"view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2\");")]
    class SubjectPagePrimaryButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentByCssClass(view, "PrimaryButton");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 14;
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2);
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:62", "SubjectPage .ListItem")]
    [CssBody("height: 114px; margin-left: 20px; margin-right: 20px; margin-top: 12px; background-color: white; border-radius: 6px; padding-left: 28px; padding-right: 28px; padding-top: 22px; padding-bottom: 22px;")]
    class SubjectPageListItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ListItem

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 114;
            view.Css.Padding.Left = 28;
            view.Css.Padding.Right = 28;
            view.Css.Padding.Top = 22;
            view.Css.Padding.Bottom = 22;
            view.Css.Margin.Left = 20;
            view.Css.Margin.Right = 20;
            view.Css.Margin.Top = 12;
            view.Css.BackgroundColor = Colors.White;
            view.Css.BorderRadius = 6;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "SubjectPage .ListItem #Textholder")]
    [CssBody("margin-top: calc(\"view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2\");")]
    class SubjectPageListItemTextholderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Textholder

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Height,view.parent.Height,(vh,ph)=>(ph-vh)/2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:64", "SubjectPage .ListItem #WordTitle")]
    [CssBody("font-weight: bold; font-size: 20px; color: #3A1251;")]
    class SubjectPageListItemWordTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordTitle

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 20;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:65", "SubjectPage .ListItem #WordRank")]
    [CssBody("color: #755985; margin-top: 5px;")]
    class SubjectPageListItemWordRankCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordRank

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.TextColor = "#755985";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "SubjectPage .ListItem #WordSub")]
    [CssBody("color: #755985; margin-top: 5px;")]
    class SubjectPageListItemWordSubCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordSub

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SubjectPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.TextColor = "#755985";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:68", ".dark-mode #Scaffold")]
    [CssBody("background-color: black;")]
    class DarkModeScaffoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Scaffold

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:68", "Page:dark #Scaffold")]
    [CssBody("background-color: black;")]
    class PageDarkScaffoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Scaffold

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".dark-mode #Scaffold .ListItem")]
    [CssBody("background-color: #333333;")]
    class DarkModeScaffoldListItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ListItem

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page:dark #Scaffold .ListItem")]
    [CssBody("background-color: #333333;")]
    class PageDarkScaffoldListItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ListItem

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:70", ".dark-mode #Scaffold .ListItem #WordTitle")]
    [CssBody("color: white;")]
    class DarkModeScaffoldListItemWordTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordTitle

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:70", "Page:dark #Scaffold .ListItem #WordTitle")]
    [CssBody("color: white;")]
    class PageDarkScaffoldListItemWordTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordTitle

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:71", ".dark-mode #Scaffold .ListItem #WordRank")]
    [CssBody("color: #737373;")]
    class DarkModeScaffoldListItemWordRankCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordRank

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#737373";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:71", "Page:dark #Scaffold .ListItem #WordRank")]
    [CssBody("color: #737373;")]
    class PageDarkScaffoldListItemWordRankCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordRank

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#737373";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:72", ".dark-mode #Scaffold .ListItem #WordSub")]
    [CssBody("color: #737373;")]
    class DarkModeScaffoldListItemWordSubCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordSub

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#737373";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:72", "Page:dark #Scaffold .ListItem #WordSub")]
    [CssBody("color: #737373;")]
    class PageDarkScaffoldListItemWordSubCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #WordSub

            view = CssEngine.FindParentByCssClass(view, "ListItem");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Scaffold");

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#737373";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:75", ".dark-mode .PrimaryButton TextView")]
    [CssBody("color: #3A1251;")]
    class DarkModePrimaryButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentByCssClass(view, "PrimaryButton");

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark-mode");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:75", "Page:dark .PrimaryButton TextView")]
    [CssBody("color: #3A1251;")]
    class PageDarkPrimaryButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentByCssClass(view, "PrimaryButton");

            if (view is null) return false;

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:77", "#Body")]
    [CssBody("height: 100%;")]
    class BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:80", "#Wrapper")]
    [CssBody("padding: 16px;")]
    class WrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Wrapper

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(16);

            return Task.CompletedTask;
        }
    }
}